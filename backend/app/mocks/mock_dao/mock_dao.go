// Code generated by MockGen. DO NOT EDIT.
// Source: repository/dao/interface.go

// Package mock_dao is a generated GoMock package.
package mock_dao

import (
	model "breakfaster/repository/model"
	schema "breakfaster/repository/schema"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockEmployeeRepository is a mock of EmployeeRepository interface
type MockEmployeeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeRepositoryMockRecorder
}

// MockEmployeeRepositoryMockRecorder is the mock recorder for MockEmployeeRepository
type MockEmployeeRepositoryMockRecorder struct {
	mock *MockEmployeeRepository
}

// NewMockEmployeeRepository creates a new mock instance
func NewMockEmployeeRepository(ctrl *gomock.Controller) *MockEmployeeRepository {
	mock := &MockEmployeeRepository{ctrl: ctrl}
	mock.recorder = &MockEmployeeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmployeeRepository) EXPECT() *MockEmployeeRepositoryMockRecorder {
	return m.recorder
}

// GetEmpID mocks base method
func (m *MockEmployeeRepository) GetEmpID(lineUID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmpID", lineUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmpID indicates an expected call of GetEmpID
func (mr *MockEmployeeRepositoryMockRecorder) GetEmpID(lineUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmpID", reflect.TypeOf((*MockEmployeeRepository)(nil).GetEmpID), lineUID)
}

// GetLineUID mocks base method
func (m *MockEmployeeRepository) GetLineUID(EmpID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLineUID", EmpID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLineUID indicates an expected call of GetLineUID
func (mr *MockEmployeeRepositoryMockRecorder) GetLineUID(EmpID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLineUID", reflect.TypeOf((*MockEmployeeRepository)(nil).GetLineUID), EmpID)
}

// UpsertEmployeeByIDs mocks base method
func (m *MockEmployeeRepository) UpsertEmployeeByIDs(employee *model.Employee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertEmployeeByIDs", employee)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertEmployeeByIDs indicates an expected call of UpsertEmployeeByIDs
func (mr *MockEmployeeRepositoryMockRecorder) UpsertEmployeeByIDs(employee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertEmployeeByIDs", reflect.TypeOf((*MockEmployeeRepository)(nil).UpsertEmployeeByIDs), employee)
}

// MockFoodRepository is a mock of FoodRepository interface
type MockFoodRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFoodRepositoryMockRecorder
}

// MockFoodRepositoryMockRecorder is the mock recorder for MockFoodRepository
type MockFoodRepositoryMockRecorder struct {
	mock *MockFoodRepository
}

// NewMockFoodRepository creates a new mock instance
func NewMockFoodRepository(ctrl *gomock.Controller) *MockFoodRepository {
	mock := &MockFoodRepository{ctrl: ctrl}
	mock.recorder = &MockFoodRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFoodRepository) EXPECT() *MockFoodRepositoryMockRecorder {
	return m.recorder
}

// GetFoodAll mocks base method
func (m *MockFoodRepository) GetFoodAll(start, end time.Time) (*[]schema.SelectFood, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFoodAll", start, end)
	ret0, _ := ret[0].(*[]schema.SelectFood)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFoodAll indicates an expected call of GetFoodAll
func (mr *MockFoodRepositoryMockRecorder) GetFoodAll(start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFoodAll", reflect.TypeOf((*MockFoodRepository)(nil).GetFoodAll), start, end)
}

// MockOrderRepository is a mock of OrderRepository interface
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// CreateOrders mocks base method
func (m *MockOrderRepository) CreateOrders(orders *[]model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrders", orders)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrders indicates an expected call of CreateOrders
func (mr *MockOrderRepositoryMockRecorder) CreateOrders(orders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrders", reflect.TypeOf((*MockOrderRepository)(nil).CreateOrders), orders)
}

// DeleteOrdersByLineUID mocks base method
func (m *MockOrderRepository) DeleteOrdersByLineUID(lineUID string, start, end time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrdersByLineUID", lineUID, start, end)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrdersByLineUID indicates an expected call of DeleteOrdersByLineUID
func (mr *MockOrderRepositoryMockRecorder) DeleteOrdersByLineUID(lineUID, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrdersByLineUID", reflect.TypeOf((*MockOrderRepository)(nil).DeleteOrdersByLineUID), lineUID, start, end)
}

// GetOrdersByLineUID mocks base method
func (m *MockOrderRepository) GetOrdersByLineUID(lineUID string, start, end time.Time) (*[]schema.SelectOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByLineUID", lineUID, start, end)
	ret0, _ := ret[0].(*[]schema.SelectOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByLineUID indicates an expected call of GetOrdersByLineUID
func (mr *MockOrderRepositoryMockRecorder) GetOrdersByLineUID(lineUID, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByLineUID", reflect.TypeOf((*MockOrderRepository)(nil).GetOrdersByLineUID), lineUID, start, end)
}

// GetOrderByEmpID mocks base method
func (m *MockOrderRepository) GetOrderByEmpID(empID string, date time.Time) (*schema.SelectOrderWithEmployeeEmpID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByEmpID", empID, date)
	ret0, _ := ret[0].(*schema.SelectOrderWithEmployeeEmpID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByEmpID indicates an expected call of GetOrderByEmpID
func (mr *MockOrderRepositoryMockRecorder) GetOrderByEmpID(empID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByEmpID", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderByEmpID), empID, date)
}

// GetOrderByAccessCardNumber mocks base method
func (m *MockOrderRepository) GetOrderByAccessCardNumber(accessCardNumber string, date time.Time) (*schema.SelectOrderWithEmployeeEmpID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByAccessCardNumber", accessCardNumber, date)
	ret0, _ := ret[0].(*schema.SelectOrderWithEmployeeEmpID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByAccessCardNumber indicates an expected call of GetOrderByAccessCardNumber
func (mr *MockOrderRepositoryMockRecorder) GetOrderByAccessCardNumber(accessCardNumber, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByAccessCardNumber", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderByAccessCardNumber), accessCardNumber, date)
}

// UpdateOrderStatus mocks base method
func (m *MockOrderRepository) UpdateOrderStatus(empID string, date time.Time, pick bool, pickUpAt int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", empID, date, pick, pickUpAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus
func (mr *MockOrderRepositoryMockRecorder) UpdateOrderStatus(empID, date, pick, pickUpAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockOrderRepository)(nil).UpdateOrderStatus), empID, date, pick, pickUpAt)
}
