// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructure/cache/redis_interface.go

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	cache "breakfaster/infrastructure/cache"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRedisCache is a mock of RedisCache interface
type MockRedisCache struct {
	ctrl     *gomock.Controller
	recorder *MockRedisCacheMockRecorder
}

// MockRedisCacheMockRecorder is the mock recorder for MockRedisCache
type MockRedisCacheMockRecorder struct {
	mock *MockRedisCache
}

// NewMockRedisCache creates a new mock instance
func NewMockRedisCache(ctrl *gomock.Controller) *MockRedisCache {
	mock := &MockRedisCache{ctrl: ctrl}
	mock.recorder = &MockRedisCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRedisCache) EXPECT() *MockRedisCacheMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRedisCache) Get(key string, dst interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key, dst)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRedisCacheMockRecorder) Get(key, dst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisCache)(nil).Get), key, dst)
}

// Set mocks base method
func (m *MockRedisCache) Set(key string, val interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockRedisCacheMockRecorder) Set(key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisCache)(nil).Set), key, val)
}

// Delete mocks base method
func (m *MockRedisCache) Delete(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRedisCacheMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRedisCache)(nil).Delete), key)
}

// ExecPipeLine mocks base method
func (m *MockRedisCache) ExecPipeLine(cmds *[]cache.Cmd) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecPipeLine", cmds)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecPipeLine indicates an expected call of ExecPipeLine
func (mr *MockRedisCacheMockRecorder) ExecPipeLine(cmds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecPipeLine", reflect.TypeOf((*MockRedisCache)(nil).ExecPipeLine), cmds)
}
