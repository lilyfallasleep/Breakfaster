// Code generated by MockGen. DO NOT EDIT.
// Source: mybot/interface.go

// Package mock_mybot is a generated GoMock package.
package mock_mybot

import (
	gomock "github.com/golang/mock/gomock"
	linebot "github.com/line/line-bot-sdk-go/linebot"
	http "net/http"
	reflect "reflect"
	time "time"
)

// MockBreakFastBot is a mock of BreakFastBot interface
type MockBreakFastBot struct {
	ctrl     *gomock.Controller
	recorder *MockBreakFastBotMockRecorder
}

// MockBreakFastBotMockRecorder is the mock recorder for MockBreakFastBot
type MockBreakFastBotMockRecorder struct {
	mock *MockBreakFastBot
}

// NewMockBreakFastBot creates a new mock instance
func NewMockBreakFastBot(ctrl *gomock.Controller) *MockBreakFastBot {
	mock := &MockBreakFastBot{ctrl: ctrl}
	mock.recorder = &MockBreakFastBotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBreakFastBot) EXPECT() *MockBreakFastBotMockRecorder {
	return m.recorder
}

// Callback mocks base method
func (m *MockBreakFastBot) Callback(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Callback", w, r)
}

// Callback indicates an expected call of Callback
func (mr *MockBreakFastBotMockRecorder) Callback(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Callback", reflect.TypeOf((*MockBreakFastBot)(nil).Callback), w, r)
}

// Predict mocks base method
func (m *MockBreakFastBot) Predict(replyToken, lineUID, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Predict", replyToken, lineUID, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// Predict indicates an expected call of Predict
func (mr *MockBreakFastBotMockRecorder) Predict(replyToken, lineUID, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Predict", reflect.TypeOf((*MockBreakFastBot)(nil).Predict), replyToken, lineUID, text)
}

// NewConfirmCard mocks base method
func (m *MockBreakFastBot) NewConfirmCard(lineUID string, start, end time.Time) (linebot.FlexContainer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewConfirmCard", lineUID, start, end)
	ret0, _ := ret[0].(linebot.FlexContainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewConfirmCard indicates an expected call of NewConfirmCard
func (mr *MockBreakFastBotMockRecorder) NewConfirmCard(lineUID, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConfirmCard", reflect.TypeOf((*MockBreakFastBot)(nil).NewConfirmCard), lineUID, start, end)
}

// MockBreakFastPushBot is a mock of BreakFastPushBot interface
type MockBreakFastPushBot struct {
	ctrl     *gomock.Controller
	recorder *MockBreakFastPushBotMockRecorder
}

// MockBreakFastPushBotMockRecorder is the mock recorder for MockBreakFastPushBot
type MockBreakFastPushBotMockRecorder struct {
	mock *MockBreakFastPushBot
}

// NewMockBreakFastPushBot creates a new mock instance
func NewMockBreakFastPushBot(ctrl *gomock.Controller) *MockBreakFastPushBot {
	mock := &MockBreakFastPushBot{ctrl: ctrl}
	mock.recorder = &MockBreakFastPushBotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBreakFastPushBot) EXPECT() *MockBreakFastPushBotMockRecorder {
	return m.recorder
}

// BroadcastFlex mocks base method
func (m *MockBreakFastPushBot) BroadcastFlex(title string, flexMsg linebot.FlexContainer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastFlex", title, flexMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// BroadcastFlex indicates an expected call of BroadcastFlex
func (mr *MockBreakFastPushBotMockRecorder) BroadcastFlex(title, flexMsg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastFlex", reflect.TypeOf((*MockBreakFastPushBot)(nil).BroadcastFlex), title, flexMsg)
}

// SendDirectFlex mocks base method
func (m *MockBreakFastPushBot) SendDirectFlex(lineUID, title string, flexMsg linebot.FlexContainer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDirectFlex", lineUID, title, flexMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDirectFlex indicates an expected call of SendDirectFlex
func (mr *MockBreakFastPushBotMockRecorder) SendDirectFlex(lineUID, title, flexMsg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDirectFlex", reflect.TypeOf((*MockBreakFastPushBot)(nil).SendDirectFlex), lineUID, title, flexMsg)
}
